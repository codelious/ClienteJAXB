<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sws="http://www.springframework.org/schema/web-services"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/web-services
           http://www.springframework.org/schema/web-services/web-services-2.0.xsd
           http://www.springframework.org/schema/oxm
           http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd">

	<!-- * El WebServiceTemplate requiere un messageSender y messageFactory
		 * Para facilitar el envio de plain Java objects, el WebServiceTemplate
		 requiere un marshaller y unmarshaller.
		 * La clase WebServiceTemplate usa una URI como el destinatario del mensaje.
		 Mira http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template -->
	<bean id="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate"
		p:marshaller-ref="jaxbMarshaller" p:unmarshaller-ref="jaxbMarshaller"
		p:defaultUri="http://localhost:18080/MiWS/services"
		p:messageSender-ref="messageSender">
		<constructor-arg ref="messageFactory" />
	</bean>

	<!-- Hay dos implementaciones del WebServiceMessageSender: HttpUrlConnectionMessageSender
		y CommonsHttpMessageSender. el CommonsHttpMessageSender provee funcionalidades avanzadas
		y faciles de usar (tales como authentication, HTTP connection pooling, y asi sucesivamente).
		Esta usa el Jakarta Commons HttpClient. 
		Mira http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template -->
	<bean id="messageSender"
		class="org.springframework.ws.transport.http.CommonsHttpMessageSender" />

	<!-- Hay dos message factories para SOAP: SaajSoapMessageFactory y AxiomSoapMessageFactory.
		Si no se especifica ningun message factory (via la propiedad messageFactory), Spring-WS usara
		el SaajSoapMessageFactory por defecto. 
		Mira http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template -->
	<bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory" />

	<!-- Aqui usamos el Jaxb2 marshaller para marshall y unmarshal nuestros objetos Java -->
	<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"
		p:contextPath="com.codelious.clientejaxb.generados" />

</beans>